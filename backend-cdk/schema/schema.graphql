scalar AWSJSON

type Balance {
	userid: String!
	expiryDate: String!
	balance: Float!
	createdAt: String!
	updatedAt: String!
}

type Chat {
	dtype: String!
	chat: [Message]!
	updatedAt: String!
	createdAt: String!
	chatid: String!
	userid: String!
	title: String!
}

type ChatMetadata {
	chatid: String!
	title: String!
	createdAt: String
	updatedAt: String!
}
type ChatMetadataResponse {
  chats: [ChatMetadata]!
  LastEvaluatedKey: String
}

type Message {
	role: String!
	content: String
	dtm: String!
	model: String
	done: String
}

input MessageInput {
	role: String!
	content: String
	dtm: String!
	model: String
	done: String
}

type SmrDaily {
	day: String!
	usagePoint: Float!
}

type SmrMonthly {
	month: String!
	usagePoint: Float!
}

type Usage {
	smrDaily: [SmrDaily]!
	smrMonthly: [SmrMonthly]!
}

type User {
	username: String!
	sub: String!
	email: String!
	emailVerified: Boolean!
	groups: [String]
	userCreateDate: String!
	userLastModifiedDate: String!
}

type Mutation {
	putChat(
		chatid: String!,
		messages: [MessageInput]!,
		title: String,
		sysMsg: String
	): String
		@aws_auth(cognito_groups: ["active"])
	addBalance(userids: [String]!, point: Int!, effective_days: Int!): String
		@aws_auth(cognito_groups: ["active"])
	deleteChats(chatids: [String]!): String
		@aws_auth(cognito_groups: ["active"])
	putSettings(settings: AWSJSON!): String
		@aws_auth(cognito_groups: ["active"])
	createUser(username: String!, email: String!, isAdmin: Boolean!, point: Int!, effective_days: Int!): String
		@aws_auth(cognito_groups: ["admin"])
	deleteUsers(usernames: [String]!): String
		@aws_auth(cognito_groups: ["admin"])
	updatePrivilegedUsers: String
		@aws_auth(cognito_groups: ["admin"])
}

type Query {
	getBalances(userids: [String]!): [Balance]
		@aws_auth(cognito_groups: ["active"])
	getUsage: Usage
		@aws_auth(cognito_groups: ["active"])
	getChatIdList(LastEvaluatedKey: String): ChatMetadataResponse
		@aws_auth(cognito_groups: ["active"])
	getChatDetail(chatid: String!): Chat
		@aws_auth(cognito_groups: ["active"])
	getSettings: AWSJSON
		@aws_auth(cognito_groups: ["active"])
	getPrivilegedUsers: [User]
		@aws_auth(cognito_groups: ["admin"])
}
