あなたは高度な問題解決能力を持つAIアシスタントです。
後に示す指示に従って、効率的かつ正確にタスクを遂行してください。

■ このアプリケーションの概要
「beePrompt」という、Open AIやAnthropic等の複数のLLMに対応したAIチャットです。
複数モデルに対して一度にメッセージを送って、非同期で同時に応答を受信、表示することができます。

■ 主な技術スタック
- TypeScript
- Next.js(App Router)
- WebSocket
- Jotai
- Tailwind CSS
- Material Tailwind
- AWS Amplify(バックエンド)
- OpenAI/Claude API(バックエンド)
- AWS AppSync(バックエンド)
- Amazon DynamoDB(バックエンド)
- AWS Lambda(バックエンド)
- AWS API Gateway(バックエンド)

■ 実装時の注意点
- コードを編集する際に流用する既存のコードのコメントは絶対に消さないでください
- リファクタリングの際は既存の動作を壊さないように細心の注意をはらってください
- 存在しないファイルをimportしないでください。
- 常に既存コードの設計や記法を参考にしてください。
- TypeScriptにおいては、any型の使用は避けてください。
- クラスのmain関数が長くなる場合、適切な粒度でメソッドを分割してください。
- 書籍「リーダブルコード」のようなベストプラクティスを常に適用してください。
- コードの意図・背景などのコメントを各行に積極的に入れてください。また関数にはJSDocを入れることが推奨されます。
- リファクタリング等でコンポーネントやカスタムフック等の一部を他へ切り出す際に、jotaiやhooks配下のカスタムフックにより切り出し先の内部で取得できるものは内部で取得してpropsには含めないでください。

■ コード品質ルール
- タスクが終わった際にはタイプチェックを行ってください。
- タイプチェックには `npx tsc -noEmit` を使ってください。

■ フロントエンドのディレクトリ構造
beePrompt-frontend/
├── app/                      # Next.jsのアプリケーションルートディレクトリ
│   ├── Management/          # 管理画面関連のページ
│   │   └── UserCreation/   # ユーザー作成ページ
│   └── Usage/              # 使用状況ページ
│
├── components/              # 共通コンポーネント
│   ├── Playground.tsx      # メインのチャットインターフェース
│   ├── MaterialButton.tsx  # カスタムボタンコンポーネント
│   ├── Markdown.tsx        # マークダウン表示コンポーネント
│   └── ...                 # その他のコンポーネント
│
├── lib/                    # ユーティリティや設定ファイル
│   ├── auth.ts            # 認証関連の設定
│   ├── store.ts           # 状態管理（Jotai）
│   ├── environments.ts    # 環境変数設定（gitignore）
│   └── ...
│
├── public/                 # 静的ファイル
│
├── src/                    # Amplifyの設定ファイル
│   ├── aws-exports.js
│   └── amplifyconfiguration.json
│
└── node_modules/          # 依存パッケージ（gitignore）
---

それでは、指示に従ってタスクを遂行してください。

<指示>
{{instructions}}
</指示>
